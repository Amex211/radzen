/*
  This file is automatically generated. Any changes will be overwritten.
  Modify order.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { GridComponent } from '@radzen/angular/dist/grid';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';
import { AddOrderDetailComponent } from '../add-order-detail/add-order-detail.component';
import { AddOrderComponent } from '../add-order/add-order.component';
import { EditOrderComponent } from '../edit-order/edit-order.component';
import { EditOrderDetailComponent } from '../edit-order-detail/edit-order-detail.component';

import { SampleService } from '../sample.service';

export class OrderGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('grid0') grid0: GridComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('grid1') grid1: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  sample: SampleService;
  parameters: any;
  getOrdersResult: any;
  getOrdersCount: any;
  master: any;
  OrderDetails: any;
  childGridFilter: any;
  childGridSort: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.sample = this.injector.get(SampleService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.grid0.load();
  }

  grid0Add(event: any) {
    this.dialogService.open(AddOrderComponent, { parameters: {}, title: 'Add Order' });
  }

  grid0Delete(event: any) {
    this.sample.deleteOrder(event.Id)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `Order deleted!` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to delete Order` });
    });
  }

  grid0LoadData(event: any) {
    this.sample.getOrders(`${event.filter}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, null, null, null)
    .subscribe((result: any) => {
      this.getOrdersResult = result.value;

      this.getOrdersCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      if (result.value.length && !this.grid0.value) {
        this.grid0.onSelect(result.value[0])
      }
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to load Orders` });
    });
  }

  grid0RowDoubleClick(event: any) {
    this.dialogService.open(EditOrderComponent, { parameters: {Id: event.Id}, title: 'Edit Order' });
  }

  grid0RowSelect(event: any) {
    this.master = event;

    this.sample.getOrderDetails(`OrderId eq ${event.Id}`, null, null, null, null, `Order,Product`, null, null)
    .subscribe((result: any) => {
      this.OrderDetails = result.value;
    }, (result: any) => {

    });
  }

  button0Click(event: any) {
    this.sample.getOrderDetails(`OrderId eq ${this.master.Id} ${this.childGridFilter ? ' and ' + this.childGridFilter : ''}`, null, null, `${this.childGridSort}`, null, null, `csv`, null)
    .subscribe((result: any) => {

    }, (result: any) => {

    });
  }

  grid1Add(event: any) {
    this.dialogService.open(AddOrderDetailComponent, { parameters: {OrderId: this.master.Id}, title: 'Add Order Detail' });
  }

  grid1Delete(event: any) {
    this.sample.deleteOrderDetail(event.Id)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `OrderDetail deleted!` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to delete OrderDetail` });
    });
  }

  grid1LoadData(event: any) {
    this.sample.getOrderDetails(`OrderId eq ${this.master.Id} and ${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
    .subscribe((result: any) => {
      this.OrderDetails = result.value;
    }, (result: any) => {

    });

    this.childGridFilter = event.filter;

    this.childGridSort = event.orderby;
  }

  grid1RowSelect(event: any) {
    this.dialogService.open(EditOrderDetailComponent, { parameters: {Id: event.Id}, title: 'Edit Order Detail' });
  }
}
