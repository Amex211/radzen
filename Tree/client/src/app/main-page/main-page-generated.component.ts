/*
  This file is automatically generated. Any changes will be overwritten.
  Modify main-page.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { TreeComponent } from '@radzen/angular/dist/tree';

import { NorthwindService } from '../northwind.service';

export class MainPageGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('tree0') tree0: TreeComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  northwind: NorthwindService;

  getCustomersResult: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.northwind = this.injector.get(NorthwindService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.northwind.getCustomers(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getCustomersResult = result.value;
    }, (result: any) => {

    });
  }

  tree0NodeExpand(event: any) {
    if (event.level == 0) {
          this.northwind.getOrders(`CustomerID eq '${event.data.CustomerID}'`, null, null, null, null, null, null, null)
      .subscribe((result: any) => {
          event.children = result.value
      }, (result: any) => {
    
      });
    }

    if (event.level == 1) {
          this.northwind.getOrderDetails(`OrderID eq ${event.data.OrderID}`, null, null, null, null, null, null, null)
      .subscribe((result: any) => {
          event.children = result.value
      }, (result: any) => {
    
      });
    }
  }
}
